// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.communityhelper.user;

import com.communityhelper.user.RealNameAuth;
import java.lang.Integer;
import java.util.List;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect RealNameAuth_Roo_Entity {
    
    declare @type: RealNameAuth: @Entity;
    
    declare @type: RealNameAuth: @Table(name = "realnameauth");
    
    @PersistenceContext
    transient EntityManager RealNameAuth.entityManager;
    
    @Transactional
    public void RealNameAuth.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void RealNameAuth.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            RealNameAuth attached = RealNameAuth.findRealNameAuth(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void RealNameAuth.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void RealNameAuth.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public RealNameAuth RealNameAuth.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        RealNameAuth merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager RealNameAuth.entityManager() {
        EntityManager em = new RealNameAuth().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long RealNameAuth.countRealNameAuths() {
        return entityManager().createQuery("SELECT COUNT(o) FROM RealNameAuth o", Long.class).getSingleResult();
    }
    
    public static List<RealNameAuth> RealNameAuth.findAllRealNameAuths() {
        return entityManager().createQuery("SELECT o FROM RealNameAuth o", RealNameAuth.class).getResultList();
    }
    
    public static RealNameAuth RealNameAuth.findRealNameAuth(Integer id) {
        if (id == null) return null;
        return entityManager().find(RealNameAuth.class, id);
    }
    
    public static List<RealNameAuth> RealNameAuth.findRealNameAuthEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM RealNameAuth o", RealNameAuth.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
